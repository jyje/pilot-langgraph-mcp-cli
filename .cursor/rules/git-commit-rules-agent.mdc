---
alwaysApply: true
---
# Git 커밋 메시지 생성 규칙

## 주요 규칙

- **이모지 + 타입 + 영어 설명**: `이모지 type: 설명` 형식을 따릅니다
- **영어 커밋 메시지**: 모든 커밋 메시지는 영어로 작성합니다
- **소문자 시작**: 설명은 소문자로 시작합니다
- **이모지 필수**: 각 커밋 타입에 맞는 이모지를 반드시 사용합니다
- **작은 단위 커밋**: 하나의 논리적 변경사항만 포함합니다

## 커밋 타입과 이모지

- ✨ `feat`: 새로운 기능 추가
- 🔧 `fix`: 버그 수정
- ♻️ `refactor`: 코드 리팩토링
- 📝 `docs`: 문서 변경
- 🎨 `style`: 코드 스타일 변경 (포맷팅, 세미콜론 등)
- ✅ `test`: 테스트 코드 추가/수정
- 🔨 `chore`: 빌드 프로세스나 보조 도구 변경
- ⚡ `perf`: 성능 개선
- 🚀 `ci`: CI/CD 설정 변경
- 📦 `build`: 빌드 시스템 변경

## 커밋 메시지 형식

```
이모지 type: description
이모지 type(scope): description
```

### 현재 프로젝트 스타일 예시:
- `✨ feat: integrate MCP server support and enhance tool system`
- `🔧 fix: change format for linebreaks in typer CLI help messages`
- `♻️ refactor: reorganize main.py by removing unused code`
- `✨ feat(project): setup Typer+uv project`

## 코드 변경 완료 후 행동

- 변경사항을 완료한 후 마지막 메시지에 **"✅ 커밋하는 것을 잊지 마세요!"** 포함
- 적절한 커밋 명령어를 제안합니다
- 여러 변경사항이 있을 경우 논리적으로 분리하여 별도 커밋 제안

## 커밋 명령어 제안

```bash
# 스테이징 및 커밋
git add .
git commit -m "✨ feat: add new MCP client functionality"

# 특정 파일만 커밋
git add src/my_mcp/tools/
git commit -m "✨ feat(tools): add datetime utility functions"
```

## 예시

<example>
사용자가 새로운 MCP 도구를 추가한 경우:

```bash
git add src/my_mcp/tools/datetime_tools.py
git commit -m "✨ feat(tools): add datetime utility functions"
```

✅ 커밋하는 것을 잊지 마세요!
</example>

<example type="invalid">
한국어나 이모지 없는 커밋 메시지:

```bash
git commit -m "새로운 기능 추가"
git commit -m "fix: 버그 수정"
git commit -m "feat: add new feature"  # 이모지 없음
```

이 프로젝트는 영어 + 이모지 스타일을 사용합니다.
</example>

## 추가 지침

- 커밋 메시지는 50자 이내로 작성 (이모지 포함)
- 설명은 명령형으로 작성 (add, fix, update 등)
- 본문이 필요한 경우 72자 줄바꿈 적용
- 이슈 번호가 있을 경우 푸터에 포함: `Closes #123`
- PR 번호가 있을 경우 마지막에 포함: `(#1)`

## 현재 프로젝트 주요 스코프

- `(project)`: 프로젝트 전반적인 설정
- `(tools)`: MCP 도구 관련
- `(agent)`: 에이전트 서비스 관련
- `(config)`: 설정 관련
- `(cli)`: CLI 명령어 관련
